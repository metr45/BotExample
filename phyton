python
import random
import time
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler

# Определение состояний (блоков)
START, EVENT_1, EVENT_2, EVENT_3, MANAGER_CONTACTED, FOLLOW_UP = range(6)

# Клавиатура событий
event_keyboard = ReplyKeyboardMarkup([["Событие 1"], ["Событие 2"], ["Событие 3"]], one_time_keyboard=True)

# Функция для ответа на события
def event(update, context):
    event_text = update.message.text

    if event_text == "Событие 1":
        # Логика для события 1
        reply_text = "Это событие 1. Действие: [действие]."
        reply_photo = "URL_изображения"
        next_state = EVENT_2
    elif event_text == "Событие 2":
        # Логика для события 2
        reply_text = "Это событие 2. Действие: [действие]."
        reply_photo = "URL_изображения"
        next_state = EVENT_3
    elif event_text == "Событие 3":
        # Логика для события 3
        reply_text = "Это событие 3. Действие: [действие]."
        reply_photo = "URL_изображения"
        next_state = MANAGER_CONTACTED
    else:
        # Логика для непредвиденного ответа
        reply_text = "Неизвестное событие. Попробуйте еще раз."
        reply_photo = None
        next_state = START

    update.message.reply_text(reply_text, reply_markup=ReplyKeyboardRemove())
    
    if reply_photo:
        update.message.reply_photo(photo=reply_photo)

    return next_state

# Функция для передачи ответа о подключении менеджера
def manager_contacted(update, context):
    reply_text = "Менеджер был успешно подключен."
    update.message.reply_text(reply_text)
    return ConversationHandler.END

# Функция для добивки (в случае отсутствия ответа в течение 3 часов)
def follow_up(update, context):
    reply_text = "Добивка: Мы видим, что вы не отвечаете уже 3 часа. Пожалуйста, сообщите нам, если нужна помощь."
    update.message.reply_text(reply_text)
    return ConversationHandler.END

# Функция для прекращения отправки сообщений
def stop(update, context):
    reply_text = "Вы прекратили получать сообщения от нашего бота."
    update.message.reply_text(reply_text)
    return ConversationHandler.END

# Функция для обработки команды /start
def start(update, context):
    reply_text = "Привет! Я бот. Выберите одно из событий:"
    update.message.reply_text(reply_text, reply_markup=event_keyboard)
    return START

def main():
    # Инициализация бота
    updater = Updater("Ваш_токен_бота", use_context=True)

    # Инициализация диспетчера
    dp = updater.dispatcher

    # Создание и добавление ConversationHandler для обработки диалогов
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            START: [MessageHandler(Filters.regex('^(Событие 1|Событие 2|Событие 3)$'), event)],
            EVENT_2: [MessageHandler(Filters.text, event)],
            EVENT_3: [MessageHandler(Filters.regex('(не беспокоить)'), stop), MessageHandler(Filters.text, event)],
            MANAGER_CONTACTED: [MessageHandler(Filters.text, manager_contacted)]
        },
        fallbacks=[MessageHandler(Filters.text, follow_up)],
        conversation_timeout=3*60*60  # 3 часа таймаута для добивки
    )
    dp.add_handler(conv_handler)

    # Запуск бота
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
